package spike.core;

import Log from spike.core.Log;
import Reconcile from spike.core.Reconcile;
import Events from spike.core.Events;

static class Reconcile {

 restrictedAttributes: [],

 constructRestrictedAttributes: function(){

   //Reconcile.restrictedAttributes = ['spike-unbinded', 'spike-binded'];

//   for(var i = 0; i < Events.allowedEvents.length; i++){
//     Reconcile.restrictedAttributes.push('spike-event-'+Events.allowedEvents[i]);
//     Reconcile.restrictedAttributes.push('spike-event-'+Events.allowedEvents[i]+'-link');
//   }

 },

 escape: function (s) {
    var n = s;
    n = n.replace(/&/g, '&amp;');
    n = n.replace(/</g, '&lt;');
    n = n.replace(/>/g, '&gt;');
    n = n.replace(/"/g, '&quot;');

    return n;
  },

  mapElements: function (nodes) {
    var map = {};
    var tags = {};
    var node;

    var indices = [];
    for (var i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      var id = spike.core.Reconcile.generateId(node, tags);
      map[id] = node;
      node._i = i;
      node._id = id;
      indices.push(i);
    }

    return {'map': map, 'indices': indices};
  },

  generateId: function (node, tags) {
    // get the tag or create one from the other node types
    var tag = (node.tagName) ? node.tagName : 'x' + node.nodeType;

    // set the counter to zero
    if (!tags[tag]) {
      tags[tag] = 0;
    }

    // increment the counter for that tag
    tags[tag]++;

    return tag + tags[tag];
  },

  generateMoves: function (map, nodes, indices, base, reverse, index) {
    var moves = [];
    var compare = [];
    var operateMap = {};
    var tags = {};

    // iterate over the nodes and base nodes in the given order
    for (var i = 0, len = nodes.length; i < len; i++) {
      var node = nodes[reverse ? (nodes.length - i - 1) : i],
        bound = base.childNodes[reverse ? (base.childNodes.length - indices[i] - 1) : indices[i]],
        id = spike.core.Reconcile.generateId(node, tags);

      // skip if force no change
      if (node.attributes && node.hasAttribute('assume-no-change')) {
        continue;
      }

      // skip if we already performed an insertion map
      if (operateMap[id]) {
        continue;
      }

      // check if the node has an id
      // if it exists in the base map, then move that node to the correct
      // position, this will usually be the same node, which means no dom move
      // is necessary, otherwise clone the node from the source (new inserts)
      var existing = map[id];
      if (existing) {
        if (existing !== bound) {
          var relativeBaseIndex = (reverse ? base.childNodes.length - existing._i - 1 : existing._i);
          moves.push({
            'action': 'moveChildElement',
            'element': existing,
            'baseIndex': index + '>' + relativeBaseIndex,
            'sourceIndex': index + '>' + i
          });

          // move the index so we can retrieve the next appropriate node
          indices.splice(i, 0, indices.splice(relativeBaseIndex, 1)[0]);
        }
        if (!node.isEqualNode(existing)) {
          compare.push([node, existing]);
        }
      } else {
        var inserted = node.cloneNode(true);
        var relativeBaseIndex = (reverse ? nodes.length - i - 1 : i);
        moves.push({
          'action': 'insertChildElement',
          'element': inserted,
          'baseIndex': index + '>' + relativeBaseIndex,
          'sourceIndex': index + '>' + relativeBaseIndex
        });
      }
      operateMap[id] = true;
    }

    // Remove any tail nodes in the base
    for (var i = 0, len = base.childNodes.length; i < len; i++) {
      var remove = base.childNodes[i];
      var removeId = remove._id;
      if (base.childNodes[i].attributes && base.childNodes[i].hasAttribute('assume-no-change')) {
        continue;
      }
      if (!operateMap[removeId]) {
        moves.push({
          'action': 'removeChildElement',
          'element': remove,
          'baseIndex': index + '>' + remove._i,
          'sourceIndex': null
        });
      }
    }

    return {'compare': compare, 'diff': moves};
  },

  diffString: function (source, base, index, baseElement) {

    var o = base == "" ? [] : base.split(/\s+/);
    var n = source == "" ? [] : source.split(/\s+/);
    var ns = new Object();
    var os = new Object();

    for (var i = 0; i < n.length; i++) {
      if (ns[n[i]] == null)
        ns[n[i]] = {
          rows: new Array(),
          o: null
        };
      ns[n[i]].rows.push(i);
    }

    for (var i = 0; i < o.length; i++) {
      if (os[o[i]] == null)
        os[o[i]] = {
          rows: new Array(),
          n: null
        };
      os[o[i]].rows.push(i);
    }

    for (var i in ns) {
      if (ns[i].rows.length == 1 && typeof(os[i]) != "undefined" && os[i].rows.length == 1) {
        n[ns[i].rows[0]] = {
          text: n[ns[i].rows[0]],
          row: os[i].rows[0]
        };
        o[os[i].rows[0]] = {
          text: o[os[i].rows[0]],
          row: ns[i].rows[0]
        };
      }
    }

    for (var i = 0; i < n.length - 1; i++) {
      if (n[i].text != null && n[i + 1].text == null && n[i].row + 1 < o.length && o[n[i].row + 1].text == null &&
        n[i + 1] == o[n[i].row + 1]) {
        n[i + 1] = {
          text: n[i + 1],
          row: n[i].row + 1
        };
        o[n[i].row + 1] = {
          text: o[n[i].row + 1],
          row: i + 1
        };
      }
    }

    for (var i = n.length - 1; i > 0; i--) {
      if (n[i].text != null && n[i - 1].text == null && n[i].row > 0 && o[n[i].row - 1].text == null &&
        n[i - 1] == o[n[i].row - 1]) {
        n[i - 1] = {
          text: n[i - 1],
          row: n[i].row - 1
        };
        o[n[i].row - 1] = {
          text: o[n[i].row - 1],
          row: i - 1
        };
      }
    }

    var oSpace = base.match(/\s+/g);
    if (oSpace == null) {
      oSpace = [''];
    } else {
      oSpace.push('');
    }
    var nSpace = source.match(/\s+/g);
    if (nSpace == null) {
      nSpace = [''];
    } else {
      nSpace.push('');
    }

    var changes = [];
    var baseIndex = 0;
    if (n.length == 0) {
      var deletedText = '';
      for (var i = 0; i < o.length; i++) {
        deletedText += o[i] + oSpace[i];
        baseIndex += o[i].length + oSpace[i].length;
      }
      if (o.length > 0) {
        changes.push({
          'action': 'deleteText',
          'element': baseElement,
          'baseIndex': index,
          'sourceIndex': index,
          '_textStart': 0,
          '_textEnd': baseIndex,
          '_deleted': deletedText,
          '_length': deletedText.length
        });
      }
    } else {
      var current = null;
      if (n[0].text == null) {
        for (var i = 0; i < o.length; i++) {
          if (o[i].text != null) {
            if (current != null) {
              changes.push(current);
            }
            current = null;
            continue;
          }

          if (current == null) {
            current = {
              'action': 'deleteText',
              'element': baseElement,
              'baseIndex': index,
              'sourceIndex': index,
              '_textStart': baseIndex,
              '_textEnd': 0,
              '_deleted': '',
              '_length': 0
            };
          }

          // update the current deletion parameters
          current['_deleted'] += o[i] + oSpace[i];
          current['_length'] = current['_deleted'].length;
          baseIndex += current['_length'];
          current['_textEnd'] = baseIndex;
        }

        if (current != null) {
          changes.push(current);
          current = null;
        }
      }

      var k = 0;
      for (var i = 0; i < n.length; i++) {
        if (n[i].text == null) {

          // ensure that previous changes are added to the changeset if
          // they happen to differ from an expected insertion below
          if (current != null && current['action'] === 'deleteText') {
            changes.push(current);
            current = null;
          }

          if (current == null) {
            current = {
              'action': 'insertText',
              'element': baseElement,
              'baseIndex': index,
              'sourceIndex': index,
              '_textStart': baseIndex,
              '_textEnd': 0,
              '_inserted': '',
              '_length': 0
            };
          }

          // update the current insertion parameters
          current['_inserted'] += n[i] + nSpace[i];
          current['_length'] = current['_inserted'].length;
          baseIndex += current['_length'];
          current['_textEnd'] = baseIndex;

        } else {
          baseIndex += n[i].text.length + nSpace[i].length;
          // edge case for white space insertions
          if (n[k].text == null) {
            continue;
          }
          for (k = n[k].row + 1; k < o.length && o[k].text == null; k++) {
            // ensure that the previous changes are added to the changeset
            if (current != null && current['action'] === 'insertText') {
              changes.push(current);
              current = null;
            }

            if (current == null) {
              current = {
                'action': 'deleteText',
                'element': baseElement,
                'baseIndex': index,
                'sourceIndex': index,
                '_textStart': baseIndex,
                '_textEnd': 0,
                '_deleted': '',
                '_length': 0
              };
            }

            // update the current insertion parameters
            current['_deleted'] += o[k] + oSpace[k];
            current['_length'] = current['_deleted'].length;
            baseIndex += current['_length'];
            current['_textEnd'] = baseIndex;
          }
        }
      }

      // ensure that remaining changes are pushed to the changeset
      if (current != null) {
        changes.push(current);
        current = null;
      }
    }

    return changes;
  },

  mapStyleValues: function (styleString) {
    // remove comments, find key-value pairs outside of quoted semicolon delimited
    var attrs = styleString ? styleString.replace(/\/\*.*\*\//g, '')
        .split(/;(?=(?:[^'"]*['"][^'"]*['"])*[^'"]*$)/)
      : [];
    var map = {};
    for (var i = 0; i < attrs.length; i++) {
      var item = attrs[i].trim();
      if (!item) {
        continue;
      }
      var index = item.indexOf(':');
      var name = item.slice(0, index).trim();
      var value = item.slice(index + 1).trim();
      if (name.length === 0 || value.length === 0) {
        continue;
      }
      map[name] = value;
    }
    return map;
  },

  diffStyleString: function (source, base, index, baseElement) {
    var diffActions = [];

    // map both source and base style strings to determine
    // whether a change was made or a new style value exists
    var sourceMap = spike.core.Reconcile.mapStyleValues(source);
    var baseMap = spike.core.Reconcile.mapStyleValues(base);
    for (var k in sourceMap) {
      var sourceVal = sourceMap[k];
      var baseVal = baseMap[k];
      if (sourceVal != baseVal) {
        diffActions.push({
          'action': 'setStyleValue',
          'name': k,
          'element': baseElement,
          'baseIndex': index,
          'sourceIndex': index,
          '_deleted': baseVal,
          '_inserted': sourceVal
        });
      }
    }

    // remove style values which were unset in the source string
    for (var k in baseMap) {
      if (sourceMap[k] == null) {
        diffActions.push({
          'action': 'removeStyleValue',
          'name': k,
          'element': baseElement,
          'baseIndex': index,
          'sourceIndex': index,
          '_deleted': baseMap[k]
        });
      }
    }

    return diffActions;
  },

  diff: function (source, base, index) {
    var diffActions = [];
    if (index == null) {
      index = '0'; // 0 for root node
    }
    // if the source and base is either a text node or a comment node,
    // then we can simply say the difference is their text content
    if (source.nodeType === base.nodeType && (source.nodeType === 3 || source.nodeType === 8)) {
      if (base.nodeValue !== source.nodeValue) {
        var textActions = spike.core.Reconcile.diffString(source.nodeValue, base.nodeValue, index, base);
        if (textActions.length > 0) {
          diffActions = diffActions.concat(textActions);
        }
      }

      return diffActions;
    }

    // look for differences between the nodes by their attributes
    if (source.attributes && base.attributes) {
      var attributes = source.attributes,
        value,
        name;

      // iterate over the source attributes that we want to copy over to the new base node
      for (var i = attributes.length; i--;) {
        value = attributes[i].nodeValue;
        name = attributes[i].nodeName;

        if(Reconcile.restrictedAttributes.indexOf(name) > -1){
            continue;
        }

        var val = base.getAttribute(name);
        if (val !== value) {
          if (val == null) {

             diffActions.push({
                  'action': 'setAttribute',
                  'name': name,
                  'element': base,
                  'baseIndex': index,
                  'sourceIndex': index,
                  '_inserted': value
                });

          } else {
            // if the attribute happens to be a style
            // only generate style Updates
            if (name === 'style') {
              var styleChanges = spike.core.Reconcile.diffStyleString(value, val, index, base);
              if (styleChanges.length > 0) {
                diffActions = diffActions.concat(styleChanges);
              }
            } else {
              diffActions.push({
                'action': 'setAttribute',
                'name': name,
                'element': base,
                'baseIndex': index,
                'sourceIndex': index,
                '_deleted': val,
                '_inserted': value
              });
            }
          }
        }
      }

      // iterate over attributes to remove that the source no longer has
      attributes = base.attributes;
      for (var i = attributes.length; i--;) {
        name = attributes[i].nodeName;

        if(Reconcile.restrictedAttributes.indexOf(name) > -1){
            continue;
        }

        if (source.getAttribute(name) === null) {
          diffActions.push({
            'action': 'removeAttribute',
            'name': name,
            'baseIndex': index,
            'sourceIndex': index,
            '_deleted': attributes[i].nodeValue
          });
        }
      }
    }

    // insert, delete, and move child nodes based on a predictable id
    var compare = [];
    if (source.childNodes && base.childNodes) {
      var mapResult = spike.core.Reconcile.mapElements(base.childNodes),
        nodes = source.childNodes;

      var map = mapResult['map'];
      var indices = mapResult['indices'];

      var moves = spike.core.Reconcile.generateMoves(map, nodes, indices.slice(0), base, false, index);
      if (moves['diff'].length > 1) {
        var backwardMoves = spike.core.Reconcile.generateMoves(map, nodes, indices.slice(0), base, true, index);
        if (backwardMoves['diff'].length < moves['diff'].length) {
          moves = backwardMoves;
        }
      }
      diffActions = diffActions.concat(moves['diff']);
      compare = moves['compare'];
    }

    // at this point we should have child nodes of equal length
    if (compare.length > 0) {
      for (var i = 0, len = compare.length; i < len; i++) {
        var sourceChildNode = compare[i][0];
        var baseChildNode = compare[i][1];

        // perform the diff between the given source and base child nodes
        var childDiffs = spike.core.Reconcile.diff(
          sourceChildNode,
          baseChildNode, index + '>' +
          baseChildNode._i);

        // if there was any difference, concat those to our existing actions
        if (childDiffs.length > 0) {
          diffActions = diffActions.concat(childDiffs);
        }

        // remove temporary data stored on the node
        delete baseChildNode._i;
        delete baseChildNode._id;
      }
    }

    return diffActions;
  },

  sortChange: function (a, b) {
    if (a['sourceIndex'] === b['sourceIndex']) {
      if (a['_textStart'] && b['_textStart']) {
        return (a['_textStart'] > b['_textStart']) ? 1 : -1;
      }
      return 0;
    } else if (!a['sourceIndex'] && b['sourceIndex']) {
      return -1;
    } else if (a['sourceIndex'] && !b['sourceIndex']) {
      return 1;
    }
    var aIndices = a['sourceIndex'].split('>');
    var bIndices = b['sourceIndex'].split('>');
    var equal = true;
    var i = 0;
    while (equal && i < aIndices.length && i < bIndices.length) {
      var aN = parseInt(aIndices[i], 10);
      var bN = parseInt(bIndices[i], 10);
      if (aN === bN) {
        i++;
        continue;
      } else if (isNaN(aN) || isNaN(bN)) {
        return isNaN(aN) ? 1 : -1;
      } else {
        return (aN > bN) ? 1 : -1;
      }
    }

    return 0;
  },

  findChildAtIndex: function (node, index) {
    if (!index || !node.childNodes || node.childNodes.length === 0) {
      return null;
    }

    var result = {};
    var indices = index.split('>');
    var found = true;
    var lastParentIndex = '';
    for (var i = 1, len = indices.length; i < len; i++) {
      var nodeIndex = parseInt(indices[i], 10);
      if (node.childNodes && node.childNodes.length > nodeIndex) {
        node = node.childNodes[nodeIndex];
      } else {
        lastParentIndex = indices.slice(0, i - 1).join('>');
        found = false;
        break;
      }
    }

    result['lastParent'] = found ? node.parentNode : node;
    result['lastParentIndex'] = found ? index.slice(0, index.lastIndexOf('>')) : lastParentIndex;
    result['node'] = found ? node : null;
    result['found'] = found;
    return result;
  },

  apply: function (changes, base, force, showChanges) {
    // a patch contains a list of changes to be made to a given element
    var unapplied = [];
    var moves = [];
    var removals = [];
    var conflictChanges = [];
    var textChanges = {};
    var styleChanges = {};
    for (var c = 0, cLen = changes.length; c < cLen; c++) {
      var change = changes[c];
      var action = change['action'];
      var baseIndex = change['baseIndex'];
      var sourceIndex = change['sourceIndex'];
      var baseReference = change['_baseReference'];
      var sourceReference = change['_sourceReference'];

      if (change['_conflict'] && !force) {
        change['_baseReference'] = spike.core.Reconcile.findChildAtIndex(base, baseIndex);
        if (sourceIndex && baseIndex !== sourceIndex) {
          change['_sourceReference'] = spike.core.Reconcile.findChildAtIndex(base, sourceIndex);
        }
        conflictChanges.push(change);
        continue;
      }

      // find the index from the base element
      // this is done using a binary index
      // where 10 is effectively first child element > first child element
      var node = null;
      var findBaseChildResult = baseReference;
      if (findBaseChildResult == null) {
        findBaseChildResult = spike.core.Reconcile.findChildAtIndex(base, baseIndex);
        if (findBaseChildResult == null) {
          unapplied.push(change);
          continue;
        }
      }

      var node = findBaseChildResult['node'];
      if (!findBaseChildResult['found']) {
        // if we were going to append the element to the base, then
        // do so now, for the given changset to be applied
        if (action === 'insertChildElement') {
          var lastParent = findBaseChildResult['lastParent'];
          var insertion = change['element'];
          if (showChanges) {
            var insNode = document.createElement('ins');
            ins.appendChild(insertion);
            insertion = ins;
          }
          moves.push({
            'parent': lastParent,
            'insertion': insertion,
            'source': null,
            'change': change,
            'appendOnly': false
          });
        } else {
          unapplied.push(change);
        }
        continue;
      }

      // if we couldn't find the base index node, apply the insert if it
      // is an appending insert, otherwise, do not apply the change
      if (node === null) {
        continue;
      }

      if (action === 'moveChildElement' || action === 'insertChildElement') {
        // locate the source index from the base node
        var sourceNode = node;
        if (sourceIndex !== baseIndex) {
          var findSourceChildResult = sourceReference;
          if (findSourceChildResult == null) {
            findSourceChildResult = spike.core.Reconcile.findChildAtIndex(base, sourceIndex);
          }
          sourceNode = findSourceChildResult !== null ? findSourceChildResult['node'] : null;
        }

        // a move that is prior to a given source element
        if (action === 'moveChildElement') {
          moves.push({
            'parent': node.parentNode,
            'insertion': node,
            'source': sourceNode,
            'change': change,
            'appendOnly': false
          });
        } else {
          var insertion = change['element'];
          if (showChanges) {
            var insNode = document.createElement('ins');
            insNode.appendChild(insertion);
            insertion = insNode;
          }
          moves.push({
            'parent': node.parentNode,
            'insertion': insertion,
            'source': sourceNode,
            'change': change,
            'appendOnly': false
          });
        }

      } else if (action === 'removeChildElement') {
        if (showChanges) {
          var delNode = document.createElement('del');
          delNode.appendChild(node.cloneNode(true));
          moves.push({
            'parent': node.parentNode,
            'insertion': delNode,
            'source': null,
            'change': change,
            'appendOnly': true
          });
        }
        removals.push([node.parentNode, node]);
      } else if (action === 'deleteText' || action === 'insertText' ||
        action === 'setStyleValue' || action === 'removeStyleValue') {
        // all text changes need to be grouped into a
        // single action, this helps us apply a single set of
        // operations to the same text node without too much trouble
        var existingOp = textChanges[change['baseIndex']];
        if (!existingOp) {
          existingOp = {
            'parent': node.parentNode,
            'source': node,
            'changes': []
          };
        }

        existingOp['changes'].push(change);
        if (action === 'insertText' || action === 'deleteText') {
          textChanges[change['baseIndex']] = existingOp;
        } else {
          styleChanges[change['baseIndex']] = existingOp;
        }
      } else if (action === 'replaceText') {
        if (!showChanges) {
          node.nodeValue = change['_inserted'];
        } else {
          var deletionNode = document.createElement('del');
          deletionNode.appendChild(document.createTextNode(change['_deleted']));
          var insertionNode = document.createElement('ins');
          insertionNode.appendChild(document.createTextNode(change['_inserted']));
          moves.push({
            'parent': node.parentNode,
            'insertion': deletionNode,
            'source': node,
            'change': change,
            'appendOnly': false
          });
          moves.push({
            'parent': node.parentNode,
            'insertion': insertionNode,
            'source': node,
            'change': change,
            'appendOnly': false
          });
          node.nodeValue = '';
        }
      } else if (action === 'setAttribute') {
        node.setAttribute(change['name'], change['_inserted']);
      } else if (action === 'removeAttribute') {
        node.removeAttribute(change['name']);
      }
    }

    // perform the moves/insertions last by first sorting the changeset
    moves.sort(function (a, b) {
      return spike.core.Reconcile.sortChange(a['change'], b['change']);
    });
    for (var i = 0, len = moves.length; i < len; i++) {
      var move = moves[i];
      var parent = move['parent'],
        insertion = move['insertion'],
        source = move['source'],
        change = move['change'],
        appendOnly = move['appendOnly'];

      // if this was an append, then find out the approximate index it should be at
      // based on the relative index of the change itself, if this is still
      // null, then just append the item altogether, typically this will
      // only matter when we are forcing the insertion to happen on conflict resolve
      if (source === null && !appendOnly) {
        var sourceIndex = change['sourceIndex'];
        if (sourceIndex) {
          var lastIndexStr = sourceIndex.substr(sourceIndex.lastIndexOf('>') + 1, sourceIndex.length);
          var childIndex = parseInt(lastIndexStr, 10);
          if (parent.childNodes && parent.childNodes.length > childIndex) {
            source = parent.childNodes[childIndex];
          }
        }
      }
      parent.insertBefore(insertion, source);
    }

    // execute all removal changes
    for (var i = 0; i < removals.length; i++) {
      var removal = removals[i];
      removal[0].removeChild(removal[1]);
    }

    // execute all text changes
    for (var b in textChanges) {
      var nodeChanges = textChanges[b];
      var node = nodeChanges['source'];
      var value = node.nodeValue;
      var nodeOps = nodeChanges['changes'];
      nodeOps.sort(function (a, b) {
        return a['_textStart'] > b['_textStart'] ? 1 : -1;
      });
      var newStr = '';
      var valueIndex = 0;
      for (var i = 0; i < nodeOps.length; i++) {
        var op = nodeOps[i];
        if (op['action'] === 'insertText') {
          newStr += value.substr(valueIndex, op['_textStart']);
          if (showChanges) {
            newStr += '<ins>' + spike.core.Reconcile.escape(op['_inserted']) + '</ins>';
          } else {
            newStr += op['_inserted'];
          }
          if (valueIndex === op['_textStart']) {
            newStr += value.substr(valueIndex, op['_textEnd']);
          }
        } else {
          newStr += value.substr(valueIndex, op['_textStart']);
          if (!!showChanges) {
            newStr += ('<del>' + spike.core.Reconcile.escape(op['_deleted']) + '</del>');
          }
        }
        valueIndex = op['_textEnd'];
      }
      newStr += value.substr(valueIndex);

      if (!showChanges) {
        node.nodeValue = newStr;
      } else {
        node.innerHTML = newStr;
      }
    }

    // execute all style changes
    for (var b in styleChanges) {
      var nodeChanges = styleChanges[b];
      var node = nodeChanges['source'];
      var nodeOps = nodeChanges['changes'];

      // generate a map and perform the operations
      var styleMap = spike.core.Reconcile.mapStyleValues(node.getAttribute('style'));
      for (var i = 0; i < nodeOps.length; i++) {
        var op = nodeOps[i];
        if (op['action'] === 'setStyleValue') {
          styleMap[op['name']] = op['_inserted'];
        } else {
          delete styleMap[op['name']];
        }
      }

      // generate the style string result
      var str = [];
      for (var k in styleMap) {
        str.push(k + ': ' + styleMap[k]);
      }

      // perform the single update to invalidate css styles
      if (str.length > 0) {
        node.setAttribute('style', str.join(';') + (str.length === 1 ? ';' : ''));
      } else {
        node.removeAttribute('style');
      }
    }

    // loop through the conflicts and group them by theirs/mine
    var conflicts = [];
    while (conflictChanges.length > 0) {
      var change = conflictChanges.pop();
      var conflict = {
        'mine': [],
        'theirs': []
      };
      conflict[change['_owner']].push(change);
      if (change['_conflictedWith']) {
        var conflictedWithChange = change['_conflictedWith'];
        if (conflictedWithChange) {
          // iterate over the changes that 'change' is conflicted with
          for (var k = 0; k < conflictedWithChange.length; k++) {
            var conflictedWithItem = conflictedWithChange[k];
            var i = conflictChanges.indexOf(conflictedWithItem);
            if (i > -1) {
              conflictChanges.splice(i, 1);
              conflict[conflictedWithItem['_owner']].push(conflictedWithItem);
            }
            // iterate over the changes that 'conflictedWithItem' is conflicted with
            if (conflictedWithItem['_conflictedWith']) {
              for (var s = 0; s < conflictedWithItem['_conflictedWith'].length; s++) {
                var item = conflictedWithItem['_conflictedWith'][s];
                var i = conflictChanges.indexOf(item);
                if (i > -1) {
                  conflictChanges.splice(i, 1);
                  conflict[item['_owner']].push(item);
                }

                delete item['_conflictedWith'];
              }
            }

            delete conflictedWithItem['_conflictedWith'];
          }

          // remove temporary reference, since we no longer need it
          delete change['_conflictedWith'];
        }
      }
      conflicts.push(conflict);
    }

    return {'unapplied': unapplied, 'conflicts': conflicts};
  }

}
