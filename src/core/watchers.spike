package spike.core;

import Assembler from spike.core.Assembler;
import Log from spike.core.Log;
import Util from spike.core.Util;
import Reconcile from spike.core.Reconcile;
import Events from spike.core.Events;
import Router from spike.core.Router;
import Templates from spike.core.Templates;

static class Watchers {

    compileWatchers: function(scope){

        var watcherHtml = Templates.compileTemplate(scope, scope.templatePath);
        var element = scope.rootSelector();

        if(Util.hashString(watcherHtml) !== Util.hashString(element.outerHTML)){
            $this.replaceChangedElements(scope, watcherHtml, element);
        }

    },

    replaceChangedElements: function(scope, watcherHtml, currentElement){

        var elementInDocument = getElementById(getSpikeId(currentElement));

        var watcherVirtual = document.createElement('div');
        watcherVirtual.innerHTML = watcherHtml;

        if(currentElement.outerHTML !== watcherHtml){

            var changes = Reconcile.diff(watcherVirtual.firstChild, currentElement);

            if(changes.length > 0){
                Reconcile.apply(changes, elementInDocument);
            }

        }

    },


    @map
    scopes: {},

    @map
    observables: {},

    @array
    observablesArr: [],

    @boolean
    stopLoop: false,

    observe: function(scope){
        this.stopLoop = true;
        this.observables[scope.elementId] = scope;
        this.createObservablesList();
        this.stopLoop = false;
    },

    unobservable: function(scope){
       this.stopLoop = true;
       this.observables[scope.elementId] = null;
       this.createObservablesList();
       this.stopLoop = false;
    },

    createObservablesList: function(){

        var list = [];
        for(var elementId in this.observables){

            if(this.observables[elementId] !== undefined && this.observables[elementId] !== null){
             list.push(this.observables[elementId]);
            }

        }

        $this.observablesArr = list;

    },

    excludedProperties: {
        //'childElements' : 'childElements',
        'eventsSelectors': 'eventsSelectors',
        'linksSelectors': 'linksSelectors',
        'compiledHtml': 'compiledHtml',
        'elementSelector': 'elementSelector',
        'templatePath': 'templatePath',
        'selector': 'selector',
        '__proto__': '__proto__',
        'selector':'selector',
        'exclusion':'exclusion'
    },

    getScopeCopy: function(scope){

        var copy = {};
        for(var key in scope) {
            if(typeof scope[key] !== 'function'){

                if($this.excludedProperties[key] === undefined){
                  copy[key] = scope[key];
                }

            }
        }

        scope.watchExclusion = scope.watchExclusion || [];
        for(var i = 0; i < scope.watchExclusion.length; i++){
           new Function("copy", "copy."+scope.watchExclusion[i]+" = '[Circular]';")(copy);
        }

        return copy;

    },

    fireWatchers: function(scope){

        var oldScope = {};

        if($this.scopes[scope.elementId]){
            oldScope = JSON.parse($this.scopes[scope.elementId]);
        }

        for(var propertyPath in scope.watchers){

           var oldScopePropertyValue = Assembler.getDotPathObject(oldScope, propertyPath);
           var scopePropertyValue = Assembler.getDotPathObject(scope, propertyPath);

           if(JSON.stringify(oldScopePropertyValue) !== JSON.stringify(scopePropertyValue)){
               scope.watchers[propertyPath](oldScopePropertyValue, scopePropertyValue);
           }

        }

    },

    isCyclic: function (obj) {
     var keys = [];
     var stack = [];
     var stackSet = new Set();
     var detected = false;

     function detect(obj, key) {
       if (!(obj instanceof Object)) { return; } // Now works with other
                                                 // kinds of object.

       if (stackSet.has(obj)) { // it's cyclic! Print the object and its locations.
         var oldindex = stack.indexOf(obj);
         var l1 = (keys.join('.') + '.' + key).replace('obj.','scope.');
         var l2 = keys.slice(0, oldindex + 1).join('.').replace('obj.','scope.');
         throw new Error('Spike Framework: Obervables circular structure field: '+l1+' = '+l2+'\nAdd to scope.exclusion given field');
         detected = true;
         return;
       }

       keys.push(key);
       stack.push(obj);
       stackSet.add(obj);
       for (var k in obj) { //dive on the object's children
         if (obj.hasOwnProperty(k)) { detect(obj[k], k); }
       }

       keys.pop();
       stack.pop();
       stackSet.delete(obj);
       return;
     }

     detect(obj, 'obj');
     return detected;
   },

    detectScopeChange: function(scope){

        var scopeCopy = $this.getScopeCopy(scope);
        $this.isCyclic(scopeCopy);

        var stringify = JSON.stringify(scopeCopy);

        if(stringify !== $this.scopes[scope.elementId]){

            Log.log('scope changed during lifecycle '+scope.getClass());

         //   console.log(stringify);
        //    console.log($this.scopes[scope.elementId]);

            $this.fireWatchers(scope);
            $this.compileWatchers(scope);

        }

        $this.scopes[scope.elementId] = stringify;

    },

    createWatchLoop: function(scope){

        setTimeout(function(){

            if(!$this.stopLoop){

                for(var i = 0; i < $this.observablesArr.length; i++){
                    $this.detectScopeChange($this.observablesArr[i]);
                }

            }

            $this.createWatchLoop();

        }, 2000)

    }

}