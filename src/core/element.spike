package spike.core;

import System from spike.core.System;
import Config from spike.core.System.config;
import Templates from spike.core.Templates;
import Errors from spike.core.Errors;
import Selectors from spike.core.Selectors;
import Assembler from spike.core.Assembler;
import Events from spike.core.Events;

class Element {

    rendered: false,

    elementId: null,
    elementSelector: null,

    compiledHtml: null,
    childElements: [],

    selector: {},
    eventsSelectors: [],
    linksSelectors: [],

    templatePath: null,

    rootSelector: function(){

        if(this.elementSelector === null){
            this.elementSelector = getElementBySpikeId(document, this.elementId);
        }

        return this.elementSelector;
    },

    Element: function(parentElement){
     this.Element(parentElement, null);
    },

    Element: function(parentElement, params){

        this.constructor_0();

        this.margeParams(params);
        this.createTemplatePath();
        this.createTemplate();

    },

    margeParams: function(params){

        if(params){
            for(var prop in params){
                this[prop] = params[prop];
            }
        }

    },

    include: function(childElement){

        childElement.extractElementId();
        this.childElements.push(childElement);

        return childElement.compiledHtml;

    },

    extractElementId: function(){

        var virtualElement = document.createElement('div');
        virtualElement.innerHTML = this.compiledHtml;

        this.elementId = getSpikeId(virtualElement.firstChild);

    },

    createTemplatePath: function(){

        this.templatePath = '';

        var elementPath = this.getClass().split('.');

        for(var i = 0; i < elementPath.length; i++){
            this.templatePath += elementPath[i]+'_';
        }

        this.templatePath = this.templatePath.substring(0, this.templatePath.lastIndexOf('_'));
        var templateFileName = this.templatePath.substring(this.templatePath.lastIndexOf('_')+1, this.templatePath.length);
        templateFileName = templateFileName.substring(0,1).toLowerCase()+templateFileName.substring(1, templateFileName.length);

        this.templatePath = this.templatePath.substring(0, this.templatePath.lastIndexOf('_'));
        this.templatePath = this.templatePath+'_'+templateFileName+'_html';

        return this.templatePath;

    },

    createTemplate: function () {

     this.compiledHtml = Templates.compileTemplate(this, this.templatePath);
     Selectors.createUniqueSelectors(this);

    },

    postConstructChildren: function(){

//        for(var i = 0; i < this.childElements.length; i++){
//            this.childElements[i].postConstruct();
//        }

    },

    watchers: {},

    watch: function(field, watchFn){

        if(this.watchers[field] === undefined){

            this.watchers[field] = watchFn;

        }else{
            Log.warn('Watcher for field {0} exist', [field]);
        }

    },

    destroy: function(){

//        if(this.childElements.length > 0){
//            for(var i = 0; i < this.childElements.length; i++){
//                this.childElements[i].destroy();
//            }
//        }

    },

    abstract function render;

    postConstruct: function(){
        this.postConstructChildren();
    }

}